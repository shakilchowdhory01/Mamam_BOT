const fs = require("fs");
const path = require("path");

// ЁЯФ╣ рж▓ржХ ржбрзЗржЯрж╛ ржлрж╛ржЗрж▓
const lockFilePath = path.join(__dirname, "grouplock.json");

// ЁЯФ╣ рж▓ржХ ржбрзЗржЯрж╛ рж▓рзЛржб/рж╕рзЗржн
function loadLockData() {
    if (!fs.existsSync(lockFilePath)) fs.writeFileSync(lockFilePath, "{}");
    return JSON.parse(fs.readFileSync(lockFilePath, "utf-8"));
}

function saveLockData(data) {
    fs.writeFileSync(lockFilePath, JSON.stringify(data, null, 2));
}

// ЁЯФ╣ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржПржбржорж┐ржи UID рждрж╛рж▓рж┐ржХрж╛
const ADMIN_UIDS = ["61578993171251"]; // ржПржЦрж╛ржирзЗ ржирж┐ржЬрзЗрж░ UID ржмрж╕рж╛ржУ

module.exports.config = {
    name: "grouplock",
    version: "3.0",
    hasPermssion: 2,
    credits: "Asadul & ChatGPT",
    description: "Powerful group lock system",
    commandCategory: "admin",
    usages: "[on/off/status]",
    cooldowns: 5,
};

module.exports.run = async ({ api, event, args, Threads }) => {
    const senderID = event.senderID;
    const threadID = event.threadID;
    const data = loadLockData();

    // тЭМ ржПржбржорж┐ржи ржЪрзЗржХ
    if (!ADMIN_UIDS.includes(senderID)) return api.sendMessage("тЭМ рждрзБржорж┐ ржПржбржорж┐ржи ржирж╛ред", threadID);

    const command = args[0] ? args[0].toLowerCase() : "";
    if (command === "on") {
        data[threadID] = true;
        saveLockData(data);
        return api.sendMessage("ЁЯФТ ржЧрзНрж░рзБржк рж▓ржХ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!", threadID);
    } else if (command === "off") {
        data[threadID] = false;
        saveLockData(data);
        return api.sendMessage("ЁЯФУ ржЧрзНрж░рзБржк ржЖржирж▓ржХ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!", threadID);
    } else if (command === "status") {
        const status = data[threadID] ? "ЁЯФТ рж▓ржХ" : "ЁЯФУ ржЖржирж▓ржХ";
        return api.sendMessage(`ржЧрзНрж░рзБржкрзЗрж░ ржмрж░рзНрждржорж╛ржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: ${status}`, threadID);
    } else {
        return api.sendMessage("тЭМ ржХржорж╛ржирзНржб: on/off/status", threadID);
    }
};

// ЁЯФ╣ ржорзЗрж╕рзЗржЬ ржмрзНрж▓ржХрж┐ржВ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
module.exports.handleEvent = async ({ event, api }) => {
    const threadID = event.threadID;
    const senderID = event.senderID;
    const messageID = event.messageID;

    // тЭМ ржПржбржорж┐ржирзЗрж░ ржорзЗрж╕рзЗржЬрзЗ ржХрж┐ржЫрзБ рж╣ржмрзЗ ржирж╛
    if (ADMIN_UIDS.includes(senderID)) return;

    const data = loadLockData();

    if (data[threadID]) {
        try {
            // ржорзЗрж╕рзЗржЬ ржбрж┐рж▓рж┐ржЯ
            await api.unsendMessage(messageID);
            // рж╕рждрж░рзНржХржмрж╛рж░рзНрждрж╛
            return api.sendMessage("тЭМ ржПржЗ ржЧрзНрж░рзБржк рж▓ржХржб ржЖржЫрзЗ! рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржбржорж┐ржи ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ ржкрж╛рж░рзЗред", threadID);
        } catch (e) {
            console.log("Error unsending message:", e);
        }
    }
};

// ЁЯФ╣ ржмржЯ ржЪрж╛рж▓рзБ рж╣ржУрзЯрж╛рж░ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ рж╕ржорж╕рзНржд ржЧрзНрж░рзБржкрзЗ рж▓ржХ ржПржХржЯрж┐ржн
module.exports.onStart = async ({ api, Threads }) => {
    const data = loadLockData();
    const threadList = await Threads.getAll(); // рж╕ржм ржЧрзНрж░рзБржк рж▓рж┐рж╕рзНржЯ
    for (const thread of threadList) {
        if (!(thread.threadID in data)) data[thread.threadID] = true;
    }
    saveLockData(data);
    console.log("тЬЕ рж╕ржм ржЧрзНрж░рзБржкрзЗ рж▓ржХ ржПржХржЯрж┐ржн ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред");
};
